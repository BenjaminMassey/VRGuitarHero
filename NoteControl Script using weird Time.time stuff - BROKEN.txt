using UnityEngine;
using System.Collections;
using UnityEngine.UI;
using System;
using System.Text;

public class NoteControl : MonoBehaviour {
    // Main control for sending all of the notes down the note area. Both creates the notes and moves them over time.
    // Does not deal with interacting with the notes (such as pressing), simply creating and sending them.
    // The score is also stored here, so that the score is not attributed to any specific note receiver.

    // Text object to keep track of and dislay the score - initialized in the start() method
    Text scoreText;

    // Variable to store the player's score, which will be applied to the Text object with updateScore()
    public static int score = 0;

    // First note in the game - initialized in Start()

    // Song to be played - initialized in Start()
    public static AudioSource song;
    // Max of three notes for the first fret at a time
    public static GameObject note1a;
    public static GameObject note1b;
    public static GameObject note1c;
    // Max of three notes for the second fret at a time
    public static GameObject note2a;
    public static GameObject note2b;
    public static GameObject note2c;
    // Max of three notes for the third fret at a time
    public static GameObject note3a;
    public static GameObject note3b;
    public static GameObject note3c;

    void Start()
    {
        // Start() is called once the unity project is run

        // Initialize scoreText
        scoreText = GameObject.Find("ScoreText").GetComponent<Text>();

        // Initilaize song and play it
        song = GameObject.Find("Song").GetComponent<AudioSource>();
        song.Play();
    }


    void Update () {
        // Update() is called every frame

        // Here is where we will run the notes
        // Move each note by (0.1, -1.55, -1.9) total
        // Each note should be on the board for .5 seconds
        float time = getRoundedTime();
        Debug.Log(time);

        // Green Note at 0.55 Seconds
        if (time == 0.1)
            note1a = createNote(1.092f, 6.4f, -10.5f);
        if (time > 0.1 && time < 0.6)
            moveObjectBy(note1a, 0f, -1.55f, -1.9f);
        if (time == 0.6)
        {
            if (note1a != null)
                Destroy(note1a);
        }
        // Green note at 0.83 seconds
        if (time == 0.4)
            note1b = createNote(1.092f, 6.4f, -10.5f);
        if (time > 0.4 && Time.time < 0.9)
            moveObjectBy(note1b, 0f, -1.55f, -1.9f);
        if (time == 0.9)
        {
            if (note1b != null)
                Destroy(note1b);
        }
        // Green note at 1.09 seconds
        if (time == 0.6)
            note1c = createNote(1.092f, 6.4f, -10.5f);
        if (time > 0.6 && time < 1.1)
            moveObjectBy(note1c, 0f, -1.55f, -1.9f);
        if (time == 1.1)
        {
            if (note1c != null)
                Destroy(note1c);
        }
        // Green note at 1.61 seconds
        if (time == 1.1)
            note1a = createNote(1.092f, 6.4f, -10.5f);
        if (time > 1.1 && time < 1.6)
            moveObjectBy(note1a, 0f, -1.55f, -1.9f);
        if (time == 1.6)
        {
            if (note1a != null)
                Destroy(note1a);
        }
        // Red note at 1.9 seconds
        if (time == 1.5)
            note2a = createNote(1.441f, 6.4f, -10.5f);
        if (time > 1.5 && time < 1.9)
            moveObjectBy(note1a, 0f, -1.55f, -1.9f);
        if (time == 1.9)
        {
            if (note2a != null)
                Destroy(note2a);
        }

        updateScore(); // Self explanatory
    }

    GameObject createNote(float x, float y, float z) {
        // Create and return a cube at a given location, which represents our note.

        GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube); // Create basic cube
        cube.transform.localScale = new Vector3(0.293f, 0.293f, 0.293f); // Shape it to our note size
        cube.transform.position = new Vector3(x, y, z); // Teleport it to the given position
        return cube; // Return the newly formed and placed object
    }
    
    void moveObjectBy(GameObject obj, float changeX, float changeY, float changeZ) {
        // Takes a certain object (such as a note) and moves it by a given x, y, and z value

        if (obj != null) // Avoid null errors
        {
            // Get original position
            float startX = obj.transform.position.x;
            float startY = obj.transform.position.y;
            float startZ = obj.transform.position.z;

            // Calculate the ending position by modifying the start by the given change
            float endX = startX + changeX;
            float endY = startY + changeY;
            float endZ = startZ + changeZ;

            // Teleport the given object to the calculated end point
            obj.transform.position = new Vector3(endX, endY, endZ);
        }
        

        
    }

    void updateScore() {
        // Simply changes the text of the object in the unity game to match the variable in this class
        scoreText.text = score.ToString();
    }

    float getRoundedTime() {
        // Get a rounded number of seconds since the program started
        decimal roundedTimeDec = Math.Round((decimal)Time.time, 2);
        String roundedTimeStr = roundedTimeDec.ToString();

        StringBuilder roundedTimeSB = new StringBuilder(roundedTimeStr);
        if (int.Parse(roundedTimeStr[roundedTimeStr.Length - 1].ToString()) < 5)
            roundedTimeSB[roundedTimeStr.Length - 1] = '0';
        else
            roundedTimeSB[roundedTimeStr.Length - 2] = (char)(int.Parse(roundedTimeStr[roundedTimeStr.Length - 2].ToString()) + 1);
        roundedTimeStr = roundedTimeSB.ToString();
        
        float roundedTime = float.Parse(roundedTimeStr);

        return roundedTime;
    }
}
using UnityEngine;
using System.Collections;
using UnityEngine.UI;

public class NoteControl : MonoBehaviour {
    // Main control for sending all of the notes down the note area. Both creates the notes and moves them over time.
    // Does not deal with interacting with the notes (such as pressing), simply creating and sending them.
    // The score is also stored here, so that the score is not attributed to any specific note receiver.

    // Text object to keep track of and dislay the score - initialized in the start() method
    Text scoreText;

    // Variable to store the player's score, which will be applied to the Text object with updateScore()
    public static int score = 0;

    // First note in the game - initialized in Start()

    // Song to be played - initialized in Start()
    public static AudioSource song;
    // Max of three notes for the first fret at a time
    public static GameObject note1a;
    public static GameObject note1b;
    public static GameObject note1c;
    // Max of three notes for the second fret at a time
    public static GameObject note2a;
    public static GameObject note2b;
    public static GameObject note2c;
    // Max of three notes for the third fret at a time
    public static GameObject note3a;
    public static GameObject note3b;
    public static GameObject note3c;

    IEnumerator Start()
    {
        // Start() is called once the unity project is run

        // Initialize scoreText
        scoreText = GameObject.Find("ScoreText").GetComponent<Text>();

        // Initilaize song and play it
        song = GameObject.Find("Song").GetComponent<AudioSource>();
        

        // Green Note at 0.55 Seconds, and green note at 0.83 seconds ; need to start green note at 1.09 seconds
        // Move each note by (0.1, -1.55, -1.9) total
        // Each note should be on the board for .5 seconds

        for (int i = 0; i < 100; i++)
        {
            // Start song at .20s in
            if(i == 20)
                song.Play();
            // 0.55s Note
            if (i == 5)
                note1a = createNote(1f, 6.4f, -10.5f); // Place Note
            if (i < 56 && i > 5)
                moveObjectBy(note1a, 0.002f, -0.031f, -0.038f); // Move Note
            if (i == 56)
            {
                if (note1a != null)
                    Destroy(note1a); // Destroy if not pressed in time
            }
            // 0.83s Note
            if (i == 33)
                note1b = createNote(1f, 6.4f, -10.5f); // Place Note
            if (i < 83 && i > 33)
                moveObjectBy(note1b, 0.002f, -0.031f, -0.038f); // Move Note
            if (i == 83)
            {
                if (note1b != null)
                    Destroy(note1b); // Destroy if not pressed in time
            }
            // 1.09s Note
            if (i == 59)
                note1c = createNote(1f, 6.4f, -10.5f); // Place Note
            if (i > 59)
                moveObjectBy(note1c, 0.002f, -0.031f, -0.038f); // Move Note


            yield return new WaitForSeconds(0.01f);
        }
        note1a = null;
        note1b = null;

        // Green note at 1.09 seconds, green note at 1.61 seconds, red note at 1.9 seconds
        // Move each note by (0.1, -1.55, -1.9) total
        // Each note should be on the board for .5 seconds
        for (int i = 0; i < 100; i++)
        {
            // 1.09s Note
            if (i < 9)
                moveObjectBy(note1c, 0.002f, -0.031f, -0.038f); // Move Note
            if (i == 9)
            {
                if (note1c != null)
                    Destroy(note1c); // Destroy if not pressed in time
            }
            // 1.61s Note
            if (i == 11)
                note1a = createNote(1f, 6.4f, -10.5f); // Place Note
            if (i > 11 && i < 61)
                moveObjectBy(note1a, 0.002f, -0.031f, -0.038f); // Move Note
            if (i == 61)
            {
                if (note1a != null)
                    Destroy(note1a); // Destroy if not pressed in time
            }
            // 1.9s Note
            if (i == 40)
                note2a = createNote(1.441f, 6.4f, -10.5f); // Place Note
            if (i > 40 && i < 90)
                moveObjectBy(note2a, 0f, -0.031f, -0.038f); // Move Note
            if (i == 90)
            {
                if (note2a != null)
                    Destroy(note2a); // Destroy if not pressed in time
            }
            yield return new WaitForSeconds(0.01f);
        }
        note1a = null;
        note1c = null;
        note2a = null;
    }


    void Update () {
        // Update() is called every frame

        updateScore(); // Self explanatory
    }

    GameObject createNote(float x, float y, float z) {
        // Create and return a cube at a given location, which represents our note.

        GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube); // Create basic cube
        cube.transform.localScale = new Vector3(0.293f, 0.293f, 0.293f); // Shape it to our note size
        cube.transform.position = new Vector3(x, y, z); // Teleport it to the given position
        return cube; // Return the newly formed and placed object
    }
    
    void moveObjectBy(GameObject obj, float changeX, float changeY, float changeZ) {
        // Takes a certain object (such as a note) and moves it by a given x, y, and z value

        if (obj != null) // Avoid null errors
        {
            // Get original position
            float startX = obj.transform.position.x;
            float startY = obj.transform.position.y;
            float startZ = obj.transform.position.z;

            // Calculate the ending position by modifying the start by the given change
            float endX = startX + changeX;
            float endY = startY + changeY;
            float endZ = startZ + changeZ;

            // Teleport the given object to the calculated end point
            obj.transform.position = new Vector3(endX, endY, endZ);
        }
        

        
    }

    void updateScore() {
        // Simply changes the text of the object in the unity game to match the variable in this class

        scoreText.text = score.ToString();
    }

}
